Arrays:
1.Monk and rotation:

import java.util.*;
public class testclass{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-->0){
            int n = sc.nextInt();
            int a[] = new int[n];
            int k = sc.nextInt();
            int p = 0;
            for(int i=0;i<n;i++){
                a[i] = sc.nextInt();
            }
            k = k%n;
            for(int i=0;i<n;i++){
                p = a[(i+(n-k))%n];
                System.out.print(p+" ");
            }
            System.out.println();
        }
    }
}

2.Monk and Inversions:

import java.util.*;
public class testclass{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-->0){
            int n = sc.nextInt();
            int[][] m = new int[n][n];
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    m[i][j] = sc.nextInt();
                }
            }
            int count = 0;
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                   int z=m[i][j];
                   for(int k=i;k<n;k++){
                       for(int p=j;p<n;p++){
                           if(z>m[k][p]){
                               count++;
                           }
                       }
                   }
                }
            }
            System.out.println(count);
        }
    }
}

3.Cycle shift:

import java.util.*;

public class testclass{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t --> 0){
            int max=0;
            int N = sc.nextInt();
            int K = sc.nextInt();
            sc.nextLine();
            String C = sc.nextLine();
            StringBuilder B = new StringBuilder(C);
            for(int i=0;i<B.length();i++){
                char temp = B.charAt(0);
                for(int j=0;j<B.length()-1;j++){
                    B.setCharAt(j,B.charAt(j+1));
                }
                B.setCharAt(B.length()-1,temp);
    
                int x = Integer.parseInt(B.toString(),2);
                max = Math.max(max,x);
                //System.out.println(B);
            }
            String Z = Integer.toBinaryString(max);
            //System.out.println(Z);
            int Q=0,count=0;
            while(Q != K){
                while(B.toString() != Z){
                    count++;
                    for(int i=0;i<B.length();i++){
                        char temp = B.charAt(0);
                        for(int j=0;j<B.length()-1;j++){
                            B.setCharAt(j,B.charAt(j+1));
                        }
                        B.setCharAt(B.length()-1,temp);
                    }
                }
                char temp = B.charAt(0);
                for(int j=0;j<B.length()-1;j++){
                    B.setCharAt(j,B.charAt(j+1));
                }
                B.setCharAt(B.length()-1,temp);
                Q++;
            }
            System.out.println(count);
        }
    }
}

4. Minimum AND xor OR:

import java.util.*;

public class testclass{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t --> 0){
            int N = sc.nextInt();
            int[] A = new int[N];
            for(int i=0;i<N;i++){
                A[i] = sc.nextInt(); 
            }
            Arrays.sort(A);
            int mini = Integer.MAX_VALUE;
            for(int i=0;i<N-1;i++){
                mini = Math.min(mini, A[i] ^ A[i + 1]);
            }
            System.out.println(mini);
        }
    }
}


