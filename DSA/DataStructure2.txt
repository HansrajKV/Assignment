Sorting:

1.Monk and Nice Strings

import java.util.*;
public class testclass{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        String[] A = new String[N+1];
        int x=0,k=0;
        for(int i=0;i<=N;i++){
            A[i] = sc.nextLine();
        }
        System.out.println("0");
        for(int i=2;i<=N;i++){
            int count=0;
            for(int j=i-1;j>=1;j--){
                if(A[i].length() > A[j].length()){
                    x = A[j].length();
                    k=0;
                }else{
                    x = A[i].length();
                    k=0;
                }
                while(k<x){
                    int l = A[i].charAt(k);
                    int m = A[j].charAt(k);
                    
                    if(A[i].compareTo(A[j]) == 0){
                        break;
                    }else{
                        if((k==(x-1)) && (A[i].charAt(k)==A[j].charAt(k)) && (A[i].length()>A[j].length())){
                            count++;
                            break;
                        }
                        if(l > m){
                            count++;
                            break;
                        }else if(m > l){
                            break;
                        }else{
                            k++;
                        }
                    }
                }
            }
            System.out.println(count);
        }
    }
}

2.Monk and Suffix sort:

import java.util.*;
import java.util.ArrayList;

public class testclass{
    public static void main(String[] args){
        Scanner s = new Scanner(System.in);
        String t = s.nextLine();
        int temp = Character.getNumericValue(t.charAt(t.length()-1));
        List<String> A = new ArrayList<String>();
        String z = new String();
        int i=0;
        while(i<t.length()-2){
            int k=i;
            z="";
            while(k<(t.length()-2)){
                z= z + t.charAt(k);
                k++;
            }
            A.add(z);
            i++;
        }Collections.sort(A);
        System.out.print(A.get(temp-1));
    }
}

3.Monk being Monitor:

import java.util.*;
class TestClass {
    public static void main(String args[] ) throws Exception {
        Scanner s = new Scanner(System.in);
        int T = s.nextInt();
        for(int z=0;z<T;z++){
            int N = s.nextInt();
            List<Integer> l = new ArrayList<Integer>();
            Hashtable<Integer, Integer> ht
            = new Hashtable<Integer, Integer>();
            int[] H = new int[N];
            int count =1;
            for(int i=0;i<N;i++){
                H[i]=s.nextInt();
            }Arrays.sort(H);
            for(int i=0;i<N-1;i++){
                if(H[i]==H[i+1]){
                    count++;
                }else{
                    l.add(H[i]);
                    ht.put(H[i],count);
                    count=1;
                }
                if(i==(N-2)){
                    l.add(H[i]);
                    ht.put(H[i],count);
                }
            }
            List<Integer> M = new ArrayList<Integer>();
            for(int i=l.size()-1;i>0;i--){
                for(int j=i;j>=0;j--){
                    if(ht.get(l.get(i)) > ht.get(l.get(j))){
                        M.add(ht.get(l.get(i)) - ht.get(l.get(j)));
                    }
                }
            }
            if(M.size() == 0){
                System.out.print(-1);
            }
            else{
                System.out.print(Collections.max(M));
            }
            System.out.println();
        } 
    }
}
